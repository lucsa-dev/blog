{"pageProps":{"post":{"title":"Como hospedar um site nextjs no github pages","date":"2021-08-01T05:35:07.322Z","slug":"como-hospedar-um-site-nextjs-no-github-pages","author":{"name":"Lucas Almeida","picture":"/assets/blog/authors/lucas.png"},"content":"<h2>Introdu√ß√£o</h2>\n<p>A id√©ia √© clonar o reposit√≥rio oficial que j√° cont√©m um <a href=\"https://github.com/vercel/next.js/tree/canary/examples/blog-starter\">blog markdown do nextjs</a> e configurar o build para gerar as p√°ginas est√°ticas a serem hospedadas no github pages.</p>\n<h2>Criar um novo projeto Blog Nextjs</h2>\n<p>Clone o seguinte reposit√≥rio:\n<a href=\"https://github.com/vercel/next.js/tree/canary/examples/blog-starter\">https://github.com/vercel/next.js/tree/canary/examples/blog-starter</a></p>\n<p>ou rode algum dos comandos abaixo para criar um diret√≥rio local com o conte√∫do do reposit√≥rio citado.</p>\n<p>n√£o se esque√ßa de trocar o texto ¬®blog-starter-app¬® pelo nome do diret√≥rio do projeto.</p>\n<pre><code>npx create-next-app --example blog-starter blog-starter-app\n</code></pre>\n<p>ou</p>\n<pre><code>yarn create next-app --example blog-starter blog-starter-app\n</code></pre>\n<p>ou</p>\n<pre><code>pnpm create next-app --example blog-starter blog-starter-app\n</code></pre>\n<h2>Analizando o projeto</h2>\n<p>Cada arquivo markdown dentro da pasta /_posts √© compilado como um post do blog. Dados como t√≠tulo, thumbnail, author, entre outros, tamb√©m s√£o declarados no arquivo com extens√£o .md</p>\n<p>entre na pasta do projeto pelo terminal e rode os comandos de start,</p>\n<pre><code>npm install\nnpm run dev\n</code></pre>\n<p>ou</p>\n<pre><code>yarn\nyarn dev\n</code></pre>\n<p>Isso iniciar√° um servidor nextjs e retornar√° um link provavelmente http://localhost:3000 pelo terminal.</p>\n<p>Acesse o link e veja seu blog pelo navegador.</p>\n<p><a href=\"https://nextjs.org/docs\">navegue na documenta√ß√£o do nextjs</a> para aprender a modifica-lo como quiser.</p>\n<h2>Como gerar p√°ginas est√°ticas com nextjs</h2>\n<p>Para gerar p√°ginas est√°ticas com next √© necess√°rio rodar o comando <a href=\"https://nextjs.org/docs/advanced-features/static-html-export\">next export</a>, para isso vamos editar nosso arquivo <strong>package.json</strong> para acrescentar o comando export ao build.</p>\n<p>acrescente ¬® &#x26;&#x26; next export¬® √† linha ¬®build¬® como no exemplo abaixo.</p>\n<pre><code>\"scripts\": {\n    \"dev\": \"next\",\n    \"build\": \"next build &#x26;&#x26; next export\",\n    \"start\": \"next start\",\n    \"typecheck\": \"tsc\"\n  }\n</code></pre>\n<p>agora ao rodar o comando build uma pasta ./out ser√° criada, com arquivos est√°ticos que servem seu blog, isso √© √∫til para ser rodado como uma action do github.</p>\n<h2>Criar vari√°vel de ambiente</h2>\n<p>Precisamos de uma vari√°vel de ambiente com o nome do nosso reposit√≥rio para que as rotas funcionem, para isso vamos criar um arquivo <code>.env</code>.</p>\n<p>Crie o arquivo <code>touch .env</code> e insira a vari√°vel como abaixo</p>\n<pre><code>NEXT_PUBLIC_REPO_NAME = \"/nome-do-seu-repositorio-aqui\"\n</code></pre>\n<h2>Como configurar o github actions para servir um site nextjs est√°tico.</h2>\n<p>Com o github actions √© poss√≠vel automatizar a compila√ß√£o com a utiliza√ß√£o de  diversos comandos, inclusive node, dispon√≠veis para serem executados direto de um reposit√≥rio no github.</p>\n<p>Usaremos o Github Actions para em cada push gerar as p√°ginas est√°ticas e coloca-las em uma nova branch pronta para seren servidas.</p>\n<p>crie um arquivo node.js.yml no diret√≥rio ./.github/workflows/</p>\n<pre><code>touch ./.github/workflows/node.js.yml\n</code></pre>\n<p>cole o seguinte c√≥digo no arquivo node.js.yml</p>\n<pre><code>name: Node.js CI\n\non:\n  push:\n    branches: [ \"main\" ]\n  pull_request:\n    branches: [ \"main\" ]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    env:\n      NEXT_PUBLIC_REPO_NAME: \"/nome-do-seu-repositorio-aqui\"\n    steps:\n    - uses: actions/checkout@v1\n      with:\n        node-version: 12\n    - run: npm install -g yarn\n    - run: yarn install --frozen-lockfile\n    - run: yarn build\n    - run: touch ./out/.nojekyll\n\n    - name: Deploy üöÄ\n      uses: JamesIves/github-pages-deploy-action@v4\n      with:\n        folder: out\n</code></pre>\n<ol>\n<li>em NEXT_PUBLIC_REPO_NAME: \"/insira-aqui-o-nome-do-repositorio\"</li>\n</ol>\n<p>Acesse a <a href=\"https://docs.github.com/pt/actions/learn-github-actions/understanding-github-actions\">documenta√ß√£o  do github actions</a> para obter mais informa√µes.</p>\n<p>agora seus pr√≥ximos commits rodar√£o o build configurado acima.</p>\n<h2>Como configurar basePath e assetPrefix do next.config.js para github pages</h2>\n<p>Para que as rotas, arquivos e imagens funcionem bem no github pages √© necess√°rio ativar as op√ß√µes basePath e assetPrefix no seu arquivo next.config.js.</p>\n<p>caso ele n√£o exista na raiz do projeto crie-o. com o comando</p>\n<pre><code>touch next.config.js \n</code></pre>\n<p>Insira o seguite c√≥digo em next.config.js substitua com a vari√°vel de ambiente do seu reposit√≥rio.</p>\n<pre><code>/**\n * @type {import('next').NextConfig}\n */\nconst nextConfig = {\n    basePath: process.env.NEXT_PUBLIC_REPO_NAME,\n    assetPrefix: process.env.NEXT_PUBLIC_REPO_NAME\n}\nmodule.exports = nextConfig\n</code></pre>\n<h2>Problema com imagens</h2>\n<p>As imagens tamb√©m precisam do nome do diret√≥rio como prefixo para funcionarem, a unica solu√ß√£o que achei pra isso √© inserindo como stringo ou como vari√°vel de ambiente manualmente nas tags  do projeto.</p>\n<p>Neste projeto apenas os componentes /components/avatar.tsx e /components/cover-image.tsx usam a tag </p>\n<p>a altera√ß√£o √© apenas inserir a string com o nome do reposit√∂rio no in√≠cio do atributo src, ou apenas usar a vari√°vel de ambiente que j√° definimos:</p>\n<pre><code>&#x3C;img src={process.env.NEXT_PUBLIC_REPO_NAME + picture} />\n</code></pre>\n<h2>Conclus√£o</h2>\n<p>Agora temos um blog hospedado pronto para uso.\n<a href=\"https://lucasalmeida-ux.github.io/blog/\">Projeto hospedaddo no github pages</a>.</p>\n"},"morePosts":[{"title":"Como implementar modo dark em um projeto nextjs e tailwindcss","date":"2021-09-08T14:44:07.322Z","slug":"como-implementar-modo-dark-em-seu-site-nextjs-tailwindcss","author":{"name":"Lucas Almeida","picture":"/assets/blog/authors/lucas.png"},"content":"\n## Introdu√ß√£o\n\nNo primeiro post mostrei como este blog foi implementado a partir de um exemplo oficial do nextjs e hospedado no github pages. Agora preciso implementar o modo dark nele para conseguirmos ler o conte√∫do sem prejudicar nossa vis√£o. hoje implementaremos um bot√£o com √≠cones de sol/lua para alternar entre os modos dark e light. \n\nUsaremos o next-themes que j√° nos fornece o funcionamento dos modos dark/light e o react-icons apenas para inserir os √≠cones de sol e lua.\n\n```\nnpm install next-themes react-icons\n```\nou\n```\nyarn add next-themes react-icons\n```\n\n## instalando o ThemeProvider\n\nNo `pages/_app.tsx` deveremos importar o `ThemeProvider` e usa-lo para envolver o <Component>\n\nPara habilitar o modo dark como padr√£o insira o atributo `defaultTheme=\"dark\"` no `ThemeProvider`\n\nO atributo `attribute=\"class\"` √© obrigat√≥rio para fazer funcionar com as classes do tailwind\n```\nimport { ThemeProvider } from \"next-themes\";\nimport { AppProps } from 'next/app'\nimport '../styles/index.css'\n\n\nexport default function MyApp({ Component, pageProps }: AppProps) {\n  return (\n    <ThemeProvider defaultTheme=\"dark\" attribute=\"class\">\n      <Component {...pageProps} />\n    </ThemeProvider>\n    );\n}\n\n```\n\n## Habilitando o modo dark\n\nNo arquivo `tailwind.config.js` insira a linha `darkMode: 'class',` para habilitar o modo dark\n```\nmodule.exports = {\n  content: ['./components/**/*.tsx', './pages/**/*.tsx'],\n  darkMode: 'class',\n```\n\n## Definindo as classes css de textos e background\n\nSetaremos as cores do texto e backgrounds em cada modo.\nNo arquivo `styles/index.css` acrescente o seguinte c√≥digo\n```\n@layer base {\n    body {\n        @apply bg-gray-50\n        dark:bg-gray-900\n        text-gray-900\n        dark:text-gray-50\n        transition-colors;\n    }\n}\n```\n\n## Componente para alternar modos.\n\nCrie um componente chamado `components/themeToggle` com o seguinte conte√∫do:\n\n```\nimport { useEffect, useState } from \"react\";\nimport { useTheme } from \"next-themes\";\n\n// Aqui temos os √≠cones de Lua e Sol\nimport { BiMoon, BiSun } from \"react-icons/bi\";\n\nexport default function ThemeToggle() {\n    const [mounted, setMounted] = useState(false);\n    const { theme, setTheme } = useTheme();\n\n    useEffect(() => setMounted(true), []);\n    if (!mounted) return null;\n\n    function isDark() {\n        return theme === \"dark\";\n    }\n\n    return (\n        <button\n            className=\"focus:outline-none\"\n            onClick={() => setTheme(isDark() ? \"light\" : \"dark\")}\n            aria-label=\"Theme toggle\"\n        >\n            {isDark() ? <BiSun size={20} /> : <BiMoon size={20} />}\n        </button>\n    );\n}\n```\nAgora √© s√≥ importa-lo e usa-lo em qualquer lugar. aqui no blog coloquei no `components/layout.tsx` para ficar presente em todas as telas\n\n```\n<div className=\"p-3 fixed right-0 top-0\">\n  <ThemeToggle />\n</div>\n```"},{"title":"Como hospedar um site nextjs no github pages","date":"2021-08-01T05:35:07.322Z","slug":"como-hospedar-um-site-nextjs-no-github-pages","author":{"name":"Lucas Almeida","picture":"/assets/blog/authors/lucas.png"},"content":"\n## Introdu√ß√£o\n\nA id√©ia √© clonar o reposit√≥rio oficial que j√° cont√©m um [blog markdown do nextjs](https://github.com/vercel/next.js/tree/canary/examples/blog-starter) e configurar o build para gerar as p√°ginas est√°ticas a serem hospedadas no github pages.\n\n## Criar um novo projeto Blog Nextjs\n\nClone o seguinte reposit√≥rio:\n<https://github.com/vercel/next.js/tree/canary/examples/blog-starter>\n\nou rode algum dos comandos abaixo para criar um diret√≥rio local com o conte√∫do do reposit√≥rio citado.\n\nn√£o se esque√ßa de trocar o texto ¬®blog-starter-app¬® pelo nome do diret√≥rio do projeto.\n\n```bash\nnpx create-next-app --example blog-starter blog-starter-app\n```\nou\n```bash\nyarn create next-app --example blog-starter blog-starter-app\n```\nou\n```bash\npnpm create next-app --example blog-starter blog-starter-app\n```\n\n## Analizando o projeto\n\nCada arquivo markdown dentro da pasta /_posts √© compilado como um post do blog. Dados como t√≠tulo, thumbnail, author, entre outros, tamb√©m s√£o declarados no arquivo com extens√£o .md\n\nentre na pasta do projeto pelo terminal e rode os comandos de start, \n\n```bash\nnpm install\nnpm run dev\n```\nou\n```bash\nyarn\nyarn dev\n```\nIsso iniciar√° um servidor nextjs e retornar√° um link provavelmente http://localhost:3000 pelo terminal.\n\nAcesse o link e veja seu blog pelo navegador.\n\n[navegue na documenta√ß√£o do nextjs](https://nextjs.org/docs) para aprender a modifica-lo como quiser.\n\n\n## Como gerar p√°ginas est√°ticas com nextjs\n\nPara gerar p√°ginas est√°ticas com next √© necess√°rio rodar o comando [next export](https://nextjs.org/docs/advanced-features/static-html-export), para isso vamos editar nosso arquivo **package.json** para acrescentar o comando export ao build.\n\nacrescente ¬® && next export¬® √† linha ¬®build¬® como no exemplo abaixo. \n```\n\"scripts\": {\n    \"dev\": \"next\",\n    \"build\": \"next build && next export\",\n    \"start\": \"next start\",\n    \"typecheck\": \"tsc\"\n  }\n```\nagora ao rodar o comando build uma pasta ./out ser√° criada, com arquivos est√°ticos que servem seu blog, isso √© √∫til para ser rodado como uma action do github.\n\n## Criar vari√°vel de ambiente\nPrecisamos de uma vari√°vel de ambiente com o nome do nosso reposit√≥rio para que as rotas funcionem, para isso vamos criar um arquivo `.env`.\n\nCrie o arquivo `touch .env` e insira a vari√°vel como abaixo \n```\nNEXT_PUBLIC_REPO_NAME = \"/nome-do-seu-repositorio-aqui\"\n```\n\n## Como configurar o github actions para servir um site nextjs est√°tico.\n\nCom o github actions √© poss√≠vel automatizar a compila√ß√£o com a utiliza√ß√£o de  diversos comandos, inclusive node, dispon√≠veis para serem executados direto de um reposit√≥rio no github.\n\nUsaremos o Github Actions para em cada push gerar as p√°ginas est√°ticas e coloca-las em uma nova branch pronta para seren servidas.\n\ncrie um arquivo node.js.yml no diret√≥rio ./.github/workflows/\n```bash\ntouch ./.github/workflows/node.js.yml\n```\ncole o seguinte c√≥digo no arquivo node.js.yml\n```\nname: Node.js CI\n\non:\n  push:\n    branches: [ \"main\" ]\n  pull_request:\n    branches: [ \"main\" ]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    env:\n      NEXT_PUBLIC_REPO_NAME: \"/nome-do-seu-repositorio-aqui\"\n    steps:\n    - uses: actions/checkout@v1\n      with:\n        node-version: 12\n    - run: npm install -g yarn\n    - run: yarn install --frozen-lockfile\n    - run: yarn build\n    - run: touch ./out/.nojekyll\n\n    - name: Deploy üöÄ\n      uses: JamesIves/github-pages-deploy-action@v4\n      with:\n        folder: out\n```\n1. em NEXT_PUBLIC_REPO_NAME: \"/insira-aqui-o-nome-do-repositorio\"\n\n\nAcesse a [documenta√ß√£o  do github actions](https://docs.github.com/pt/actions/learn-github-actions/understanding-github-actions) para obter mais informa√µes.\n\nagora seus pr√≥ximos commits rodar√£o o build configurado acima.\n\n## Como configurar basePath e assetPrefix do next.config.js para github pages\n\nPara que as rotas, arquivos e imagens funcionem bem no github pages √© necess√°rio ativar as op√ß√µes basePath e assetPrefix no seu arquivo next.config.js.\n\ncaso ele n√£o exista na raiz do projeto crie-o. com o comando \n```\ntouch next.config.js \n```\n\nInsira o seguite c√≥digo em next.config.js substitua com a vari√°vel de ambiente do seu reposit√≥rio.\n```\n/**\n * @type {import('next').NextConfig}\n */\nconst nextConfig = {\n    basePath: process.env.NEXT_PUBLIC_REPO_NAME,\n    assetPrefix: process.env.NEXT_PUBLIC_REPO_NAME\n}\nmodule.exports = nextConfig\n```\n\n## Problema com imagens\nAs imagens tamb√©m precisam do nome do diret√≥rio como prefixo para funcionarem, a unica solu√ß√£o que achei pra isso √© inserindo como stringo ou como vari√°vel de ambiente manualmente nas tags <img> do projeto.\n\nNeste projeto apenas os componentes /components/avatar.tsx e /components/cover-image.tsx usam a tag <img>\n\na altera√ß√£o √© apenas inserir a string com o nome do reposit√∂rio no in√≠cio do atributo src, ou apenas usar a vari√°vel de ambiente que j√° definimos:\n```\n<img src={process.env.NEXT_PUBLIC_REPO_NAME + picture} />\n```\n## Conclus√£o\n\nAgora temos um blog hospedado pronto para uso.\n[Projeto hospedaddo no github pages](https://lucasalmeida-ux.github.io/blog/)."}]},"__N_SSG":true}