{"pageProps":{"post":{"title":"Como implementar modo dark em um projeto nextjs e tailwindcss","date":"2021-09-08T14:44:07.322Z","slug":"como-implementar-modo-dark-em-seu-site-nextjs-tailwindcss","author":{"name":"Lucas Almeida","picture":"/assets/blog/authors/lucas.png"},"content":"<h2>Introdução</h2>\n<p>No primeiro post mostrei como este blog foi implementado a partir de um exemplo oficial do nextjs e hospedado no github pages. Agora preciso implementar o modo dark nele para conseguirmos ler o conteúdo sem prejudicar nossa visão. hoje implementaremos um botão com ícones de sol/lua para alternar entre os modos dark e light.</p>\n<p>Usaremos o next-themes que já nos fornece o funcionamento dos modos dark/light e o react-icons apenas para inserir os ícones de sol e lua.</p>\n<pre><code>npm install next-themes react-icons\n</code></pre>\n<p>ou</p>\n<pre><code>yarn add next-themes react-icons\n</code></pre>\n<h2>instalando o ThemeProvider</h2>\n<p>No <code>pages/_app.tsx</code> deveremos importar o <code>ThemeProvider</code> e usa-lo para envolver o </p>\n<p>Para habilitar o modo dark como padrão insira o atributo <code>defaultTheme=\"dark\"</code> no <code>ThemeProvider</code></p>\n<p>O atributo <code>attribute=\"class\"</code> é obrigatório para fazer funcionar com as classes do tailwind</p>\n<pre><code>import { ThemeProvider } from \"next-themes\";\nimport { AppProps } from 'next/app'\nimport '../styles/index.css'\n\n\nexport default function MyApp({ Component, pageProps }: AppProps) {\n  return (\n    &#x3C;ThemeProvider defaultTheme=\"dark\" attribute=\"class\">\n      &#x3C;Component {...pageProps} />\n    &#x3C;/ThemeProvider>\n    );\n}\n\n</code></pre>\n<h2>Habilitando o modo dark</h2>\n<p>No arquivo <code>tailwind.config.js</code> insira a linha <code>darkMode: 'class',</code> para habilitar o modo dark</p>\n<pre><code>module.exports = {\n  content: ['./components/**/*.tsx', './pages/**/*.tsx'],\n  darkMode: 'class',\n</code></pre>\n<h2>Definindo as classes css de textos e background</h2>\n<p>Setaremos as cores do texto e backgrounds em cada modo.\nNo arquivo <code>styles/index.css</code> acrescente o seguinte código</p>\n<pre><code>@layer base {\n    body {\n        @apply bg-gray-50\n        dark:bg-gray-900\n        text-gray-900\n        dark:text-gray-50\n        transition-colors;\n    }\n}\n</code></pre>\n<h2>Componente para alternar modos.</h2>\n<p>Crie um componente chamado <code>components/themeToggle</code> com o seguinte conteúdo:</p>\n<pre><code>import { useEffect, useState } from \"react\";\nimport { useTheme } from \"next-themes\";\n\n// Aqui temos os ícones de Lua e Sol\nimport { BiMoon, BiSun } from \"react-icons/bi\";\n\nexport default function ThemeToggle() {\n    const [mounted, setMounted] = useState(false);\n    const { theme, setTheme } = useTheme();\n\n    useEffect(() => setMounted(true), []);\n    if (!mounted) return null;\n\n    function isDark() {\n        return theme === \"dark\";\n    }\n\n    return (\n        &#x3C;button\n            className=\"focus:outline-none\"\n            onClick={() => setTheme(isDark() ? \"light\" : \"dark\")}\n            aria-label=\"Theme toggle\"\n        >\n            {isDark() ? &#x3C;BiSun size={20} /> : &#x3C;BiMoon size={20} />}\n        &#x3C;/button>\n    );\n}\n</code></pre>\n<p>Agora é só importa-lo e usa-lo em qualquer lugar. aqui no blog coloquei no <code>components/layout.tsx</code> para ficar presente em todas as telas</p>\n<pre><code>&#x3C;div className=\"p-3 fixed right-0 top-0\">\n  &#x3C;ThemeToggle />\n&#x3C;/div>\n</code></pre>\n"},"morePosts":[{"title":"Como implementar modo dark em um projeto nextjs e tailwindcss","date":"2021-09-08T14:44:07.322Z","slug":"como-implementar-modo-dark-em-seu-site-nextjs-tailwindcss","author":{"name":"Lucas Almeida","picture":"/assets/blog/authors/lucas.png"},"content":"\n## Introdução\n\nNo primeiro post mostrei como este blog foi implementado a partir de um exemplo oficial do nextjs e hospedado no github pages. Agora preciso implementar o modo dark nele para conseguirmos ler o conteúdo sem prejudicar nossa visão. hoje implementaremos um botão com ícones de sol/lua para alternar entre os modos dark e light. \n\nUsaremos o next-themes que já nos fornece o funcionamento dos modos dark/light e o react-icons apenas para inserir os ícones de sol e lua.\n\n```\nnpm install next-themes react-icons\n```\nou\n```\nyarn add next-themes react-icons\n```\n\n## instalando o ThemeProvider\n\nNo `pages/_app.tsx` deveremos importar o `ThemeProvider` e usa-lo para envolver o <Component>\n\nPara habilitar o modo dark como padrão insira o atributo `defaultTheme=\"dark\"` no `ThemeProvider`\n\nO atributo `attribute=\"class\"` é obrigatório para fazer funcionar com as classes do tailwind\n```\nimport { ThemeProvider } from \"next-themes\";\nimport { AppProps } from 'next/app'\nimport '../styles/index.css'\n\n\nexport default function MyApp({ Component, pageProps }: AppProps) {\n  return (\n    <ThemeProvider defaultTheme=\"dark\" attribute=\"class\">\n      <Component {...pageProps} />\n    </ThemeProvider>\n    );\n}\n\n```\n\n## Habilitando o modo dark\n\nNo arquivo `tailwind.config.js` insira a linha `darkMode: 'class',` para habilitar o modo dark\n```\nmodule.exports = {\n  content: ['./components/**/*.tsx', './pages/**/*.tsx'],\n  darkMode: 'class',\n```\n\n## Definindo as classes css de textos e background\n\nSetaremos as cores do texto e backgrounds em cada modo.\nNo arquivo `styles/index.css` acrescente o seguinte código\n```\n@layer base {\n    body {\n        @apply bg-gray-50\n        dark:bg-gray-900\n        text-gray-900\n        dark:text-gray-50\n        transition-colors;\n    }\n}\n```\n\n## Componente para alternar modos.\n\nCrie um componente chamado `components/themeToggle` com o seguinte conteúdo:\n\n```\nimport { useEffect, useState } from \"react\";\nimport { useTheme } from \"next-themes\";\n\n// Aqui temos os ícones de Lua e Sol\nimport { BiMoon, BiSun } from \"react-icons/bi\";\n\nexport default function ThemeToggle() {\n    const [mounted, setMounted] = useState(false);\n    const { theme, setTheme } = useTheme();\n\n    useEffect(() => setMounted(true), []);\n    if (!mounted) return null;\n\n    function isDark() {\n        return theme === \"dark\";\n    }\n\n    return (\n        <button\n            className=\"focus:outline-none\"\n            onClick={() => setTheme(isDark() ? \"light\" : \"dark\")}\n            aria-label=\"Theme toggle\"\n        >\n            {isDark() ? <BiSun size={20} /> : <BiMoon size={20} />}\n        </button>\n    );\n}\n```\nAgora é só importa-lo e usa-lo em qualquer lugar. aqui no blog coloquei no `components/layout.tsx` para ficar presente em todas as telas\n\n```\n<div className=\"p-3 fixed right-0 top-0\">\n  <ThemeToggle />\n</div>\n```"},{"title":"Como hospedar um site nextjs no github pages","date":"2021-08-01T05:35:07.322Z","slug":"como-hospedar-um-site-nextjs-no-github-pages","author":{"name":"Lucas Almeida","picture":"/assets/blog/authors/lucas.png"},"content":"\n## Introdução\n\nA idéia é clonar o repositório oficial que já contém um [blog markdown do nextjs](https://github.com/vercel/next.js/tree/canary/examples/blog-starter) e configurar o build para gerar as páginas estáticas a serem hospedadas no github pages.\n\n## Criar um novo projeto Blog Nextjs\n\nClone o seguinte repositório:\n<https://github.com/vercel/next.js/tree/canary/examples/blog-starter>\n\nou rode algum dos comandos abaixo para criar um diretório local com o conteúdo do repositório citado.\n\nnão se esqueça de trocar o texto ¨blog-starter-app¨ pelo nome do diretório do projeto.\n\n```bash\nnpx create-next-app --example blog-starter blog-starter-app\n```\nou\n```bash\nyarn create next-app --example blog-starter blog-starter-app\n```\nou\n```bash\npnpm create next-app --example blog-starter blog-starter-app\n```\n\n## Analizando o projeto\n\nCada arquivo markdown dentro da pasta /_posts é compilado como um post do blog. Dados como título, thumbnail, author, entre outros, também são declarados no arquivo com extensão .md\n\nentre na pasta do projeto pelo terminal e rode os comandos de start, \n\n```bash\nnpm install\nnpm run dev\n```\nou\n```bash\nyarn\nyarn dev\n```\nIsso iniciará um servidor nextjs e retornará um link provavelmente http://localhost:3000 pelo terminal.\n\nAcesse o link e veja seu blog pelo navegador.\n\n[navegue na documentação do nextjs](https://nextjs.org/docs) para aprender a modifica-lo como quiser.\n\n\n## Como gerar páginas estáticas com nextjs\n\nPara gerar páginas estáticas com next é necessário rodar o comando [next export](https://nextjs.org/docs/advanced-features/static-html-export), para isso vamos editar nosso arquivo **package.json** para acrescentar o comando export ao build.\n\nacrescente ¨ && next export¨ à linha ¨build¨ como no exemplo abaixo. \n```\n\"scripts\": {\n    \"dev\": \"next\",\n    \"build\": \"next build && next export\",\n    \"start\": \"next start\",\n    \"typecheck\": \"tsc\"\n  }\n```\nagora ao rodar o comando build uma pasta ./out será criada, com arquivos estáticos que servem seu blog, isso é útil para ser rodado como uma action do github.\n\n## Criar variável de ambiente\nPrecisamos de uma variável de ambiente com o nome do nosso repositório para que as rotas funcionem, para isso vamos criar um arquivo `.env`.\n\nCrie o arquivo `touch .env` e insira a variável como abaixo \n```\nNEXT_PUBLIC_REPO_NAME = \"/nome-do-seu-repositorio-aqui\"\n```\n\n## Como configurar o github actions para servir um site nextjs estático.\n\nCom o github actions é possível automatizar a compilação com a utilização de  diversos comandos, inclusive node, disponíveis para serem executados direto de um repositório no github.\n\nUsaremos o Github Actions para em cada push gerar as páginas estáticas e coloca-las em uma nova branch pronta para seren servidas.\n\ncrie um arquivo node.js.yml no diretório ./.github/workflows/\n```bash\ntouch ./.github/workflows/node.js.yml\n```\ncole o seguinte código no arquivo node.js.yml\n```\nname: Node.js CI\n\non:\n  push:\n    branches: [ \"main\" ]\n  pull_request:\n    branches: [ \"main\" ]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    env:\n      NEXT_PUBLIC_REPO_NAME: \"/nome-do-seu-repositorio-aqui\"\n    steps:\n    - uses: actions/checkout@v1\n      with:\n        node-version: 12\n    - run: npm install -g yarn\n    - run: yarn install --frozen-lockfile\n    - run: yarn build\n    - run: touch ./out/.nojekyll\n\n    - name: Deploy 🚀\n      uses: JamesIves/github-pages-deploy-action@v4\n      with:\n        folder: out\n```\n1. em NEXT_PUBLIC_REPO_NAME: \"/insira-aqui-o-nome-do-repositorio\"\n\n\nAcesse a [documentação  do github actions](https://docs.github.com/pt/actions/learn-github-actions/understanding-github-actions) para obter mais informaões.\n\nagora seus próximos commits rodarão o build configurado acima.\n\n## Como configurar basePath e assetPrefix do next.config.js para github pages\n\nPara que as rotas, arquivos e imagens funcionem bem no github pages é necessário ativar as opções basePath e assetPrefix no seu arquivo next.config.js.\n\ncaso ele não exista na raiz do projeto crie-o. com o comando \n```\ntouch next.config.js \n```\n\nInsira o seguite código em next.config.js substitua com a variável de ambiente do seu repositório.\n```\n/**\n * @type {import('next').NextConfig}\n */\nconst nextConfig = {\n    basePath: process.env.NEXT_PUBLIC_REPO_NAME,\n    assetPrefix: process.env.NEXT_PUBLIC_REPO_NAME\n}\nmodule.exports = nextConfig\n```\n\n## Problema com imagens\nAs imagens também precisam do nome do diretório como prefixo para funcionarem, a unica solução que achei pra isso é inserindo como stringo ou como variável de ambiente manualmente nas tags <img> do projeto.\n\nNeste projeto apenas os componentes /components/avatar.tsx e /components/cover-image.tsx usam a tag <img>\n\na alteração é apenas inserir a string com o nome do repositörio no início do atributo src, ou apenas usar a variável de ambiente que já definimos:\n```\n<img src={process.env.NEXT_PUBLIC_REPO_NAME + picture} />\n```\n## Conclusão\n\nAgora temos um blog hospedado pronto para uso.\n[Projeto hospedaddo no github pages](https://lucasalmeida-ux.github.io/blog/)."}]},"__N_SSG":true}