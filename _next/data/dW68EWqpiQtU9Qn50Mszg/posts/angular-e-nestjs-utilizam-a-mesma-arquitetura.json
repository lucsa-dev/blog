{"pageProps":{"post":{"title":"Angular e NestJS: Utilizam a mesma arquitetura? Vamos explorar as principais semelhan√ßas e diferen√ßas entre eles.","date":"2023-06-10T02:17:00.322Z","slug":"angular-e-nestjs-utilizam-a-mesma-arquitetura","author":{"name":"Lucas S. Almeida","picture":"/assets/blog/authors/lucas.png"},"content":"<h1>Semelhan√ßas entre os framworks NestJS e Angular</h1>\n<p>Com essa combina√ß√£o, √© poss√≠vel construir aplica√ß√µes completas, tanto no back-end quanto no front-end, utilizando a mesma arquitetura, linguagem e testes.</p>\n<h3>Nomeclatura dos arquivos</h3>\n<p>A nomenclatura dos arquivos segue o mesmo padr√£o: <code>nome.fun√ß√£o.extens√£o</code>. No NestJS, um controller seria <code>cat.controller.ts</code>, enquanto no Angular, um componente seria <code>cat.component.ts</code>. Alguns arquivos at√© compartilham o mesmo nome, como m√≥dulos e servi√ßos. Por exemplo: <code>app.module.ts</code> e <code>cat.service.ts</code>.</p>\n<h2>main.js</h2>\n<p>O arquivo de inicializa√ß√£o de ambos possue o mesmo nome, diret√≥rio e fun√ß√£o. O arquivo <code>src/main.js</code> realiza o bootstrap e inicia o AppModule.</p>\n<p>NestJS</p>\n<pre><code>async function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  await app.listen(3000);\n}\nbootstrap();\n</code></pre>\n<p>Angular</p>\n<pre><code>platformBrowserDynamic()\n  .bootstrapModule(AppModule)\n  .catch((err) => console.error(err));\n</code></pre>\n<h2>Moduloriza√ß√£o</h2>\n<p>No arquivo <code>src/main.js</code>, o <code>AppModule</code> √© passado como par√¢metro para o bootstrap. Tanto no NestJS quanto no Angular o AppModule representa o m√≥dulo principal da aplica√ß√£o.</p>\n<pre><code>@Module({\n  imports: [BrowserModule, FormsModule],\n  controllers: [CatsController],\n  providers: [CatsService],\n})\nexport class CatsModule {}\n</code></pre>\n<p>NestJS - O m√≥dulo √© exportado como uma classe decorada com @Module() que recebe um objeto de configura√ß√£o.\"</p>\n<pre><code>@NgModule({\n  declarations: [CatsComponent],\n  imports: [FormsModule],\n  providers: [CatsService],\n  bootstrap: [AppComponent],\n})\nexport class CatsModule {}\n</code></pre>\n<p>Angular - A √∫nica diferen√ßa √© o nome do decorador <code>@NgModule()</code>.</p>\n<p>import, export, providers s√£o id√™nticos.</p>\n<h2>Servi√ßos</h2>\n<p>Ao criar um servi√ßo tanto no aplicativo no NestJS quanto no Angular √© utilizado o decorator @Injectable().</p>\n<p>NestJS / Angular</p>\n<pre><code>@Injectable()\nclass HeroService {}\n</code></pre>\n<ul>\n<li>Inje√ß√£o de dependencia tamb√©m √© id√™ntica. Tudo √© classe e as depend√™ncia s√£o passadas via constructor,</li>\n</ul>\n<pre><code>@Component({ ‚Ä¶ })\nclass HeroListComponent {\n  constructor(private service: HeroService) {}\n}\n</code></pre>\n<h2>CLI</h2>\n<p>Ambos possuem CLI que geram c√≥digos prontos j√° com m√≥dulos configurados. exemplo:</p>\n<pre><code>ng generate component product-details\n</code></pre>\n<p>gerar um componente no angular</p>\n<pre><code>nest generate service product\n</code></pre>\n<p>gerar um service no NestJS</p>\n<pre><code>nest generate resource product\n</code></pre>\n<p>Gerar uma pasta com um m√≥dulo contendo um CRUD b√°sico: controller, service e teste</p>\n<p>Essas s√£o algumas das semelhan√ßas entre Angular e NestJS.</p>\n"},"morePosts":[{"title":"Angular e NestJS: Utilizam a mesma arquitetura? Vamos explorar as principais semelhan√ßas e diferen√ßas entre eles.","date":"2023-06-10T02:17:00.322Z","slug":"angular-e-nestjs-utilizam-a-mesma-arquitetura","author":{"name":"Lucas S. Almeida","picture":"/assets/blog/authors/lucas.png"},"content":"\n# Semelhan√ßas entre os framworks NestJS e Angular\n\nCom essa combina√ß√£o, √© poss√≠vel construir aplica√ß√µes completas, tanto no back-end quanto no front-end, utilizando a mesma arquitetura, linguagem e testes.\n\n### Nomeclatura dos arquivos\n\nA nomenclatura dos arquivos segue o mesmo padr√£o: `nome.fun√ß√£o.extens√£o`. No NestJS, um controller seria `cat.controller.ts`, enquanto no Angular, um componente seria `cat.component.ts`. Alguns arquivos at√© compartilham o mesmo nome, como m√≥dulos e servi√ßos. Por exemplo: `app.module.ts` e `cat.service.ts`.\n\n## main.js\n\nO arquivo de inicializa√ß√£o de ambos possue o mesmo nome, diret√≥rio e fun√ß√£o. O arquivo `src/main.js` realiza o bootstrap e inicia o AppModule.\n\nNestJS\n\n```typescript\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  await app.listen(3000);\n}\nbootstrap();\n```\n\nAngular\n\n```typescript\nplatformBrowserDynamic()\n  .bootstrapModule(AppModule)\n  .catch((err) => console.error(err));\n```\n\n## Moduloriza√ß√£o\n\nNo arquivo `src/main.js`, o `AppModule` √© passado como par√¢metro para o bootstrap. Tanto no NestJS quanto no Angular o AppModule representa o m√≥dulo principal da aplica√ß√£o.\n\n```typescript\n@Module({\n  imports: [BrowserModule, FormsModule],\n  controllers: [CatsController],\n  providers: [CatsService],\n})\nexport class CatsModule {}\n```\n\nNestJS - O m√≥dulo √© exportado como uma classe decorada com @Module() que recebe um objeto de configura√ß√£o.\"\n\n```typescript\n@NgModule({\n  declarations: [CatsComponent],\n  imports: [FormsModule],\n  providers: [CatsService],\n  bootstrap: [AppComponent],\n})\nexport class CatsModule {}\n```\n\nAngular - A √∫nica diferen√ßa √© o nome do decorador `@NgModule()`.\n\nimport, export, providers s√£o id√™nticos.\n\n## Servi√ßos\n\nAo criar um servi√ßo tanto no aplicativo no NestJS quanto no Angular √© utilizado o decorator @Injectable().\n\nNestJS / Angular\n\n```typescript\n@Injectable()\nclass HeroService {}\n```\n\n- Inje√ß√£o de dependencia tamb√©m √© id√™ntica. Tudo √© classe e as depend√™ncia s√£o passadas via constructor,\n\n```typescript\n@Component({ ‚Ä¶ })\nclass HeroListComponent {\n  constructor(private service: HeroService) {}\n}\n```\n\n## CLI\n\nAmbos possuem CLI que geram c√≥digos prontos j√° com m√≥dulos configurados. exemplo:\n\n```bash\nng generate component product-details\n```\n\ngerar um componente no angular\n\n```bash\nnest generate service product\n```\n\ngerar um service no NestJS\n\n```bash\nnest generate resource product\n```\n\nGerar uma pasta com um m√≥dulo contendo um CRUD b√°sico: controller, service e teste\n\nEssas s√£o algumas das semelhan√ßas entre Angular e NestJS.\n"},{"title":"üôãüèª‚Äç‚ôÇÔ∏è Hello World!","date":"2023-02-08T12:35:07.322Z","slug":"Hello World","author":{"name":"Lucas S. Almeida","picture":"/assets/blog/authors/lucas.png"},"content":"\n## Introdu√ß√£o\n\nfala dev, Beleza ? Me chamo Lucas, sou cearense, programador h√° alguns anos e atualmeite trabalho construindo coisas incr√≠veis na Trivod.\n\nEste blog tem o objetivo de falar sobre os desafios do dia-a-dia do dev web, compartilhar boas pr√°ticas, fundamentos e solu√ß√µes que servir√£o para ajudar outros devs. Al√©m disso, acredito que passar conhecimento √© uma excelente forma de aprimorar meus pr√≥prios conhecimentos al√©m de fazer a diferen√ßa.\n\nmeus planos envolvem falar de Javascript/Typescript, Fundamentos, framworks, erros, e resolu√ß√£o de problemas.\n\nObrigado, at√© a pr√≥pxima üññüèª.\n"},{"title":"Como implementar modo dark em um projeto nextjs e tailwindcss","date":"2022-09-08T14:44:07.322Z","slug":"como-implementar-modo-dark-em-seu-site-nextjs-tailwindcss","author":{"name":"Lucas Almeida","picture":"/assets/blog/authors/lucas.png"},"content":"\n## Como implementar modo dark em um projeto nextjs e tailwindcss\n\nNo primeiro post mostrei como este blog foi implementado a partir de um exemplo oficial do nextjs e hospedado no github pages. Agora preciso implementar o modo dark nele para conseguirmos ler o conte√∫do sem prejudicar nossa vis√£o. hoje implementaremos um bot√£o com √≠cones de sol/lua para alternar entre os modos dark e light.\n\nUsaremos o next-themes que j√° nos fornece o funcionamento dos modos dark/light e o react-icons apenas para inserir os √≠cones de sol e lua.\n\n```\nnpm install next-themes react-icons\n```\n\nou\n\n```\nyarn add next-themes react-icons\n```\n\n## instalando o ThemeProvider\n\nNo `pages/_app.tsx` deveremos importar o `ThemeProvider` e usa-lo para envolver o <Component>\n\nPara habilitar o modo dark como padr√£o insira o atributo `defaultTheme=\"dark\"` no `ThemeProvider`\n\nO atributo `attribute=\"class\"` √© obrigat√≥rio para fazer funcionar com as classes do tailwind\n\n```\nimport { ThemeProvider } from \"next-themes\";\nimport { AppProps } from 'next/app'\nimport '../styles/index.css'\n\n\nexport default function MyApp({ Component, pageProps }: AppProps) {\n  return (\n    <ThemeProvider defaultTheme=\"dark\" attribute=\"class\">\n      <Component {...pageProps} />\n    </ThemeProvider>\n    );\n}\n\n```\n\n## Habilitando o modo dark\n\nNo arquivo `tailwind.config.js` insira a linha `darkMode: 'class',` para habilitar o modo dark\n\n```\nmodule.exports = {\n  content: ['./components/**/*.tsx', './pages/**/*.tsx'],\n  darkMode: 'class',\n```\n\n## Definindo as classes css de textos e background\n\nSetaremos as cores do texto e backgrounds em cada modo.\nNo arquivo `styles/index.css` acrescente o seguinte c√≥digo\n\n```\n@layer base {\n    body {\n        @apply bg-gray-50\n        dark:bg-gray-900\n        text-gray-900\n        dark:text-gray-50\n        transition-colors;\n    }\n}\n```\n\n## Componente para alternar modos.\n\nCrie um componente chamado `components/themeToggle` com o seguinte conte√∫do:\n\n```\nimport { useEffect, useState } from \"react\";\nimport { useTheme } from \"next-themes\";\n\n// Aqui temos os √≠cones de Lua e Sol\nimport { BiMoon, BiSun } from \"react-icons/bi\";\n\nexport default function ThemeToggle() {\n    const [mounted, setMounted] = useState(false);\n    const { theme, setTheme } = useTheme();\n\n    useEffect(() => setMounted(true), []);\n    if (!mounted) return null;\n\n    function isDark() {\n        return theme === \"dark\";\n    }\n\n    return (\n        <button\n            className=\"focus:outline-none\"\n            onClick={() => setTheme(isDark() ? \"light\" : \"dark\")}\n            aria-label=\"Theme toggle\"\n        >\n            {isDark() ? <BiSun size={20} /> : <BiMoon size={20} />}\n        </button>\n    );\n}\n```\n\nAgora √© s√≥ importa-lo e usa-lo em qualquer lugar. aqui no blog coloquei no `components/layout.tsx` para ficar presente em todas as telas\n\n```\n<div className=\"p-3 fixed right-0 top-0\">\n  <ThemeToggle />\n</div>\n```\n"},{"title":"Como hospedar um site nextjs no github pages","date":"2022-08-01T05:35:07.322Z","slug":"como-hospedar-um-site-nextjs-no-github-pages","author":{"name":"Lucas Almeida","picture":"/assets/blog/authors/lucas.png"},"content":"\n## Como hospedar um site nextjs no github pages\n\nA id√©ia √© clonar o reposit√≥rio oficial que j√° cont√©m um [blog markdown do nextjs](https://github.com/vercel/next.js/tree/canary/examples/blog-starter) e configurar o build para gerar as p√°ginas est√°ticas a serem hospedadas no github pages.\n\n## Criar um novo projeto Blog Nextjs\n\nClone o seguinte reposit√≥rio:\n<https://github.com/vercel/next.js/tree/canary/examples/blog-starter>\n\nou rode algum dos comandos abaixo para criar um diret√≥rio local com o conte√∫do do reposit√≥rio citado.\n\nn√£o se esque√ßa de trocar o texto ¬®blog-starter-app¬® pelo nome do diret√≥rio do projeto.\n\n```bash\nnpx create-next-app --example blog-starter blog-starter-app\n```\n\nou\n\n```bash\nyarn create next-app --example blog-starter blog-starter-app\n```\n\nou\n\n```bash\npnpm create next-app --example blog-starter blog-starter-app\n```\n\n## Analizando o projeto\n\nCada arquivo markdown dentro da pasta /\\_posts √© compilado como um post do blog. Dados como t√≠tulo, thumbnail, author, entre outros, tamb√©m s√£o declarados no arquivo com extens√£o .md\n\nentre na pasta do projeto pelo terminal e rode os comandos de start,\n\n```bash\nnpm install\nnpm run dev\n```\n\nou\n\n```bash\nyarn\nyarn dev\n```\n\nIsso iniciar√° um servidor nextjs e retornar√° um link provavelmente http://localhost:3000 pelo terminal.\n\nAcesse o link e veja seu blog pelo navegador.\n\n[navegue na documenta√ß√£o do nextjs](https://nextjs.org/docs) para aprender a modifica-lo como quiser.\n\n## Como gerar p√°ginas est√°ticas com nextjs\n\nPara gerar p√°ginas est√°ticas com next √© necess√°rio rodar o comando [next export](https://nextjs.org/docs/advanced-features/static-html-export), para isso vamos editar nosso arquivo **package.json** para acrescentar o comando export ao build.\n\nacrescente ¬® && next export¬® √† linha ¬®build¬® como no exemplo abaixo.\n\n```\n\"scripts\": {\n    \"dev\": \"next\",\n    \"build\": \"next build && next export\",\n    \"start\": \"next start\",\n    \"typecheck\": \"tsc\"\n  }\n```\n\nagora ao rodar o comando build uma pasta ./out ser√° criada, com arquivos est√°ticos que servem seu blog, isso √© √∫til para ser rodado como uma action do github.\n\n## Criar vari√°vel de ambiente\n\nPrecisamos de uma vari√°vel de ambiente com o nome do nosso reposit√≥rio para que as rotas funcionem, para isso vamos criar um arquivo `.env`.\n\nCrie o arquivo `touch .env` e insira a vari√°vel como abaixo\n\n```\nNEXT_PUBLIC_REPO_NAME = \"/nome-do-seu-repositorio-aqui\"\n```\n\n## Como configurar o github actions para servir um site nextjs est√°tico.\n\nCom o github actions √© poss√≠vel automatizar a compila√ß√£o com a utiliza√ß√£o de diversos comandos, inclusive node, dispon√≠veis para serem executados direto de um reposit√≥rio no github.\n\nUsaremos o Github Actions para em cada push gerar as p√°ginas est√°ticas e coloca-las em uma nova branch pronta para seren servidas.\n\ncrie um arquivo node.js.yml no diret√≥rio ./.github/workflows/\n\n```bash\ntouch ./.github/workflows/node.js.yml\n```\n\ncole o seguinte c√≥digo no arquivo node.js.yml\n\n```\nname: Node.js CI\n\non:\n  push:\n    branches: [ \"main\" ]\n  pull_request:\n    branches: [ \"main\" ]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    env:\n      NEXT_PUBLIC_REPO_NAME: \"/nome-do-seu-repositorio-aqui\"\n    steps:\n    - uses: actions/checkout@v1\n      with:\n        node-version: 12\n    - run: npm install -g yarn\n    - run: yarn install --frozen-lockfile\n    - run: yarn build\n    - run: touch ./out/.nojekyll\n\n    - name: Deploy üöÄ\n      uses: JamesIves/github-pages-deploy-action@v4\n      with:\n        folder: out\n```\n\n1. em NEXT_PUBLIC_REPO_NAME: \"/insira-aqui-o-nome-do-repositorio\"\n\nAcesse a [documenta√ß√£o do github actions](https://docs.github.com/pt/actions/learn-github-actions/understanding-github-actions) para obter mais informa√µes.\n\nagora seus pr√≥ximos commits rodar√£o o build configurado acima.\n\n## Como configurar basePath e assetPrefix do next.config.js para github pages\n\nPara que as rotas, arquivos e imagens funcionem bem no github pages √© necess√°rio ativar as op√ß√µes basePath e assetPrefix no seu arquivo next.config.js.\n\ncaso ele n√£o exista na raiz do projeto crie-o. com o comando\n\n```\ntouch next.config.js\n```\n\nInsira o seguite c√≥digo em next.config.js substitua com a vari√°vel de ambiente do seu reposit√≥rio.\n\n```\n/**\n * @type {import('next').NextConfig}\n */\nconst nextConfig = {\n    basePath: process.env.NEXT_PUBLIC_REPO_NAME,\n    assetPrefix: process.env.NEXT_PUBLIC_REPO_NAME\n}\nmodule.exports = nextConfig\n```\n\n## Problema com imagens\n\nAs imagens tamb√©m precisam do nome do diret√≥rio como prefixo para funcionarem, a unica solu√ß√£o que achei pra isso √© inserindo como stringo ou como vari√°vel de ambiente manualmente nas tags <img> do projeto.\n\nNeste projeto apenas os componentes /components/avatar.tsx e /components/cover-image.tsx usam a tag <img>\n\na altera√ß√£o √© apenas inserir a string com o nome do reposit√∂rio no in√≠cio do atributo src, ou apenas usar a vari√°vel de ambiente que j√° definimos:\n\n```\n<img src={process.env.NEXT_PUBLIC_REPO_NAME + picture} />\n```\n\n## Conclus√£o\n\nAgora temos um blog hospedado pronto para uso. Em settings/pages √© poss√≠vel configurar um dom√≠nio perosnalizado, vo√ße pode adquirir um dom√≠nio em uma plataforma como registro.br, domains.google, godaddy.com [e aponta-lo para o dns do github] (https://docs.github.com/pt/pages/configuring-a-custom-domain-for-your-github-pages-site)\n[Projeto hospedaddo no github pages](https://github.com/lucsa-dev/blog).\n"}]},"__N_SSG":true}